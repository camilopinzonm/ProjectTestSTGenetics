@page "/Animals"
@using TestStGenentics.Shared.ModelResponse


@inject IRepository repository

@if (animals is null)
{
    <p>Loading ... wait a moment!!!</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Animals
                <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="oi oi-plus"></i> Adicionar País</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            </div>


            <GenericList MyList="animals">
                <Body>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Order" Click="@InsertRow" Disabled=@(animalToInsert != null || animalToUpdate != null) />
                    <RadzenDataGrid @ref="animalsGrid" AllowAlternatingRows="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                                Data="@animals" TItem="AnimalResponse" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="180px"
                                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedAnimalResponses class="m-4"
                                Click="@MySelect">
                        <Columns>


                            <RadzenDataGridColumn TItem="AnimalResponse" Width="60px" Sortable="false" Filterable="false">
                                <HeaderTemplate>
                                   <RadzenCheckBox onclick="@MySelect" TriState="false" TValue="bool" Value="@(animals.Any(i => selectedAnimalResponses != null && selectedAnimalResponses.Contains(i)))"
                                    Change="@(args => selectedAnimalResponses = args ? animals.ToList() : null)" />
                                </HeaderTemplate>
                                <Template Context="animal">
                                    <RadzenCheckBox onclick="@MySelect" TriState="false" Value="@(selectedAnimalResponses != null && selectedAnimalResponses.Contains(animal))"
                                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { animalsGrid.SelectRow(animal); }}) />
                                 </Template>
                            </RadzenDataGridColumn>




                            <RadzenDataGridColumn TItem="AnimalResponse" Property="AnimalId" Title="ID" Width="50px" />
                            <RadzenDataGridColumn TItem="AnimalResponse" Property="Name" Title="Name" Width="120px">
                                <EditTemplate Context="animal">
                                    <RadzenTextBox @bind-Value="animal.Name" Style="width:100%; display: block" Name="Name" />
                                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                                </EditTemplate>
                            </RadzenDataGridColumn>
                            
                            <RadzenDataGridColumn TItem="AnimalResponse" Property="BreedName" Title="Breed" Width="140px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.BreedId" Data="@breeds" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="BirthDate" Title="Birth Date" Width="120px">
                                <Template Context="animal">
                                    @String.Format("{0:d}", animal.BirthDate)
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenDatePicker @bind-Value="animal.BirthDate" Style="width:100%" />
                                </EditTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="SexName" Title="SexId" Width="120px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.SexId" Data="@sexs" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                            </RadzenDataGridColumn>


                            <RadzenDataGridColumn TItem="AnimalResponse" Property="Price" Title="Price" Width="120px">
                                <Template Context="animal">
                                    @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", animal.Price)
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenNumeric @bind-Value=" animal.Price" Style="width:150%" />
                                </EditTemplate>
                                <FooterTemplate>
                                    Total quantity: <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", animals.Sum(o => o.Price))</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="StatusRowName" Title="Status" Width="80px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.StatusRowId" Data="@statusrows" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                             </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Context="animal" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="100px">
                                <Template Context="animal">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(animal))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(animal))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(animal))">
                                    </RadzenButton>
                                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(animal))">
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(animal))">
                                    </RadzenButton>
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </Body>
            </GenericList>
        </div>
    </div>




}

@code {

    RadzenDataGrid<AnimalResponse>? animalsGrid;
    List<AnimalResponse> animals;
    IEnumerable<Sex> sexs;
    IEnumerable<StatusRow> statusrows;
    IEnumerable<Breed> breeds;
    IList<AnimalResponse> selectedAnimalResponses;
    bool allowRowSelectOnRowClick = true;

    AnimalResponse animalToInsert;
    AnimalResponse animalToUpdate;

    void Reset()
    {
        animalToInsert = null;
        animalToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        var responseHttpsexs = await repository.Get<List<Sex>>("/Api/sexs");
        sexs = responseHttpsexs.Response;
        var responseHttpstatusrows = await repository.Get<List<StatusRow>>("/Api/statusrows");
        statusrows = responseHttpstatusrows.Response;
        var responseHttpbreeds = await repository.Get<List<Breed>>("/Api/breeds");
        breeds = responseHttpbreeds.Response;
        await GetData();
    }

    async Task GetData() { 
        var responseHttp = await repository.Get<List<AnimalResponse>>("/Api/animals");
        animals = responseHttp.Response;
    }

    async Task EditRow(AnimalResponse animal)
    {
        animalToUpdate = animal;
        await animalsGrid.EditRow(animal);
    }

    async void OnUpdateRow(AnimalResponse animal)
    {
        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        animalToUpdate = null;

        await repository.Put("/Api/animals",animal);
        await animalsGrid.Reload();
        await GetData();

    }

    async Task SaveRow(AnimalResponse animal)
    {
        await animalsGrid.UpdateRow(animal);
    }

    void CancelEdit(AnimalResponse animal)
    {
        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        animalToUpdate = null;

        animalsGrid.CancelEditRow(animal);

    }

    async Task DeleteRow(AnimalResponse animal)
    {

        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        if (animal == animalToUpdate)
        {
            animalToUpdate = null;
        }

        if (animals.Contains(animal))
        {

            //dbContext.SaveChanges();
            var id = animal.AnimalId;
            await animalsGrid.Reload();
            await repository.Delete($"/Api/animals/{id}");
            await animalsGrid.Reload();
            await GetData();
        }

        else
        {
            animalsGrid.CancelEditRow(animal);
            await animalsGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        animalToInsert = new AnimalResponse();
        await animalsGrid.InsertRow(animalToInsert);
    }

    async void OnCreateRow(AnimalResponse animal)
    {
        var a = animal;
        animalToInsert = null;
        await animalsGrid.Reload();
        await repository.Post("/Api/animals", animal);
        await animalsGrid.Reload();
        await GetData();

    }

    async Task MySelect()
    {

        var a = selectedAnimalResponses;
        foreach (var item in selectedAnimalResponses)
        {
            Console.WriteLine(item.Name);
        }
        
    }

}
