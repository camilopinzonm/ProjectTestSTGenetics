@page "/Animals"

@using TestStGenentics.Shared.ModelResponse
@using TestStGenentics.Web.Utils



@inject IRepository repository



<div Class="rz-p-0 rz-p-md-12">
    <div class="card">
         <div class="card-header">
             <span>
                <i class="oi oi-globe"></i> Filter
                
            </span>
             </div>
             <RadzenTemplateForm TItem="AnimalResponse" Data="@animalResponse" Submit="FilterData">
                <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
                
                    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                   <RadzenFormField Text="Name" Style="width: 100%;">
                        <RadzenTextBox type="text" class="form-control" MaxLength="16" @bind-Value="@animalResponse.Name" />
                    </RadzenFormField>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenFormField Text="Breed" Style="width: 100%;">
                        <RadzenDropDown @bind-Value="animalResponse.BreedId" Data="@breeds" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </RadzenFormField>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenFormField Text="Birth date" Style="width: 100%;">
                        <RadzenDatePicker TValue="DateTime"   class="form-control" MaxLength="16" @bind-Value="@animalResponse.BirthDate" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenFormField Text="Sex" Style="width: 100%;">
                        <RadzenDropDown @bind-Value="animalResponse.SexId" Data="@sexs" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenFormField Text="Price" Style="width: 100%;">
                        <RadzenNumeric Format="0.00"  class="form-control" MaxLength="16" @bind-Value="@animalResponse.Price" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                 <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenFormField Text="Status " Style="width: 100%;">
                        
                        <RadzenDropDown @bind-Value="animalResponse.StatusRowId" Data="@statusrows" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </RadzenFormField>
                </RadzenColumn>

                
                <RadzenButton Text="Filter" ButtonType="ButtonType.Button" Click="(() => FilterData())" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Text="Clear" ButtonType="ButtonType.Button" Click="(() => ClearFilter())" ButtonStyle="ButtonStyle.Primary" />
                
                </RadzenRow>
            </RadzenTemplateForm>
        

    </div>
</div>



@if (dataselected)
{
<div Class="rz-p-0 rz-p-md-12">
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-list"></i> Purchases
            </span>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Categoría</th>
                        <th style="width:200px">Quantity</th>
                        <th style="width:200px">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in purchases.OrderBy(x=>x.Breeds))
                    {
                        <tr>
                            <td>
                                @item.Breeds
                            </td>
                            <td>
                                @item.CountRows
                            </td>
                            <td>
                                @item.SumRows
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                <p>Total Quantity: @TotalQuantity </p>
                    <p>Total Amount: @TotalAmount</p>
                <p>Total Dto: @TotalDto </p>
                    <p>Total Freight: @Freight</p>
                    <p>Total Price: @TotalPrice</p>
            </div>
        </div>
    </div>
  </div>
}



@if (animals is null)
{
    <p>Loading ... wait a moment!!!</p>
}
else



{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Animals
                
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            </div>


            <GenericList MyList="animals">
                <Body>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Order" Click="@InsertRow" Disabled=@(animalToInsert != null || animalToUpdate != null) />
                    <RadzenButton Text="Calculate purchase" ButtonType="ButtonType.Button" Click="(() => Calculate())" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenDataGrid @ref="animalsGrid" AllowAlternatingRows="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                                Data="@animals" TItem="AnimalResponse" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="180px"
                                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedAnimalResponses class="m-4">
                        <Columns>


                            <RadzenDataGridColumn TItem="AnimalResponse" Width="60px" Sortable="false" Filterable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox onclick="@SelectRows" TriState="false" TValue="bool" Value="@(animals.Any(i => selectedAnimalResponses != null && selectedAnimalResponses.Contains(i)))"
                                    Change="@(args => selectedAnimalResponses = args ? animals.ToList() : null)" /> ojo
                                </HeaderTemplate>
                                <Template Context="animal">
                                    <RadzenCheckBox onclick="@SelectRows" TriState="false" Value="@(selectedAnimalResponses != null && selectedAnimalResponses.Contains(animal))"
                                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { animalsGrid.SelectRow(animal); }}) />
                                 </Template>
                            </RadzenDataGridColumn>




                            <RadzenDataGridColumn TItem="AnimalResponse" Property="AnimalId" Title="ID" Width="50px" />
                            <RadzenDataGridColumn TItem="AnimalResponse" Property="Name" Title="Name" Width="120px">
                                <EditTemplate Context="animal">
                                    <RadzenTextBox @bind-Value="animal.Name" Style="width:100%; display: block" Name="Name" />
                                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                                </EditTemplate>
                            </RadzenDataGridColumn>
                            
                            <RadzenDataGridColumn TItem="AnimalResponse" Property="BreedName" Title="Breed" Width="140px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.BreedId" Data="@breeds" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="BirthDate" Title="Birth Date" Width="120px">
                                <Template Context="animal">
                                    @String.Format("{0:d}", animal.BirthDate)
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenDatePicker @bind-Value="animal.BirthDate" Style="width:100%" />
                                </EditTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="SexName" Title="SexId" Width="120px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.SexId" Data="@sexs" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                            </RadzenDataGridColumn>


                            <RadzenDataGridColumn TItem="AnimalResponse" Property="Price" Title="Price" Width="120px">
                                <Template Context="animal">
                                    @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", animal.Price)
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenNumeric @bind-Value=" animal.Price" Style="width:150%" />
                                </EditTemplate>
                                <FooterTemplate>
                                    Total quantity: <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", animals.Sum(o => o.Price))</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Property="StatusRowName" Title="Status" Width="80px" >
                                <EditTemplate Context="animal">
                                    <RadzenDropDown @bind-Value="animal.StatusRowId" Data="@statusrows" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                                </EditTemplate>
                             </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="AnimalResponse" Context="animal" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="100px">
                                <Template Context="animal">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(animal))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(animal))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                </Template>
                                <EditTemplate Context="animal">
                                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(animal))">
                                    </RadzenButton>
                                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(animal))">
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(animal))">
                                    </RadzenButton>
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </Body>
            </GenericList>
        </div>
    </div>

}


@code {

    AnimalResponse animal;
    AnimalResponse animalResponse = new AnimalResponse();
    List<AnimalResponse> animals;
    RadzenDataGrid<AnimalResponse>? animalsGrid;
    IList<AnimalResponse> selectedAnimalResponses = new List<AnimalResponse>();

    RadzenDataGrid<Purchase>? purchaseGrid;
    Purchase purchase;
    List<Purchase> purchases = new List<Purchase>();

    IEnumerable<Sex> sexs;
    IEnumerable<StatusRow> statusrows;
    IEnumerable<Breed> breeds;

    bool dataselected = false;
    bool allowRowSelectOnRowClick = true;
    int TotalQuantity;
    decimal TotalDto;
    decimal TotalAmount=0;
    decimal TotalPrice;
    decimal Freight;


    AnimalResponse animalToInsert;
    AnimalResponse animalToUpdate;

    void Reset()
    {
        animalToInsert = null;
        animalToUpdate = null;
    }



    protected override async Task OnInitializedAsync()
    {
        var responseHttpsexs = await repository.Get<List<Sex>>("/Api/sexs");
        sexs = responseHttpsexs.Response;
        var responseHttpstatusrows = await repository.Get<List<StatusRow>>("/Api/statusrows");
        statusrows = responseHttpstatusrows.Response;
        var responseHttpbreeds = await repository.Get<List<Breed>>("/Api/breeds");
        breeds = responseHttpbreeds.Response;
        await GetData();
        selectedAnimalResponses = null;
    }

    async Task GetData()
    {
        bool dataselected = false;
        var responseHttp = await repository.Get<List<AnimalResponse>>("/Api/animals");
        animals = responseHttp.Response;
    }

    async Task FilterData()
    { 
        var responseHttpResponseFilter  = await repository.PostGetRows<AnimalResponse, List<AnimalResponse>>("/Api/animals/PostGetAll", animalResponse);
        animals = responseHttpResponseFilter.Response;

    }

    async Task ClearFilter()
    { 
        await GetData();

    }
    async Task EditRow(AnimalResponse animal)
    {
        animalToUpdate = animal;
        await animalsGrid.EditRow(animal);
    }

    async void OnUpdateRow(AnimalResponse animal)
    {
        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        animalToUpdate = null;

        await repository.Put("/Api/animals",animal);
        await animalsGrid.Reload();
        await GetData();

    }

    async Task SaveRow(AnimalResponse animal)
    {
        await animalsGrid.UpdateRow(animal);
    }

    void CancelEdit(AnimalResponse animal)
    {
        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        animalToUpdate = null;

        animalsGrid.CancelEditRow(animal);

    }

    async Task DeleteRow(AnimalResponse animal)
    {

        if (animal == animalToInsert)
        {
            animalToInsert = null;
        }

        if (animal == animalToUpdate)
        {
            animalToUpdate = null;
        }

        if (animals.Contains(animal))
        {

            var id = animal.AnimalId;
            await animalsGrid.Reload();
            await repository.Delete($"/Api/animals/{id}");
            await animalsGrid.Reload();
            await GetData();
        }

        else
        {
            animalsGrid.CancelEditRow(animal);
            await animalsGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        animalToInsert = new AnimalResponse();
        await animalsGrid.InsertRow(animalToInsert);
    }

    async void OnCreateRow(AnimalResponse animal)
    {
        var a = animal;
        animalToInsert = null;
        await animalsGrid.Reload();
        await repository.Post("/Api/animals", animal);
        await animalsGrid.Reload();
        await GetData();

    }

    async Task Calculate() {


        dataselected = true;

        var data = await CalculatePurchase.GetDataCalculate(selectedAnimalResponses);
        purchases = data.ListRows;
        TotalQuantity = data.Quantity;
        TotalAmount = data.TotalAmount;
        TotalDto = data.TotalDto;
        Freight = data.Freight;
        TotalPrice= TotalAmount - TotalDto + Freight;
    

    }

    async Task CalculateDto() {

    }

    async Task SelectRows()
    {

        //if (selectedAnimalResponses == null || selectedAnimalResponses.Count() == 0)
        //{
        //    dataselected = false;
        //}
       

    }

}
